# -*- coding: utf-8 -*-
"""28_nov_2022.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PDVeX8BMiysZGejZx_AgypwgWvOcJcPz
"""

#Create a variable outside of a function, and use it inside the function
x = "python"

def myfunc():
  print("hello " + x)

myfunc()

def myfunction():
  a=1
  a+=1
  print(a)

myfunction()
print(a) #error CAN'T DISPLAY VALUE OF A OUTSIDE FUNCTION

a=1 #GLOBAL

def myfunction():
  print(a)

myfunction()
print(a) #CAN DISPLAY VALUE OF A OUTSIDE FUNCTION

#LOCAL AND GLOBAL VARIABLE HAVE SAME NAME #GLOBAL KEYWORD

a=1 #GLOBAL VAR

def myfunction():
  global a
  print("global a=",a)
  a=2 #update the value of a
  print(a)

myfunction()
print(a)

f = lambda x:x*x #lambda function
value=f(5) #call lambda function
print(value) #display result

f = lambda x,y:x+y #lambda function
value=f(5.8,3) #call lambda function
print(value) #display result

#FILTER
#USEFUL TO FILTER OUT THE ELEMENTS OF A SEQUENCE DEPENDING ON THE RESULT OF A FUNCTION.

def is_even(x):
  if x%2==0:
    return True

  else:
    return False


#let us take a list of numbers
lst=[10,20,23,45,46,70,99]

#call filter() with is_even() and 1st
lst1=list(filter(is_even,lst)) 
print(lst1)

#MAP(FUNCTION,SEQUENCE)

#find squares of element in the list

def square(x):
  return x*x

#numbers 

lst = [1,2,3,4,5,6]

squarelst=list(map(square,lst))
print(squarelst)

#lambda that returns square
lst = [1,2,3,4,5,6]

squarelst=list(map(lambda x:x*x,lst))
print(squarelst)

#syntax - reduce(function,sequence)
#REDUCES A SEQUENCE OF ELEMENTS TO SINGLE VALUE
from functools import reduce

lst=[1,2,3,4,5]
reduce(lambda x,y: x*y,lst)

#To calculate the sum of numbers from 1 to 50, write reduce() function with a lambda.
#OUTPUT: 1275

sum=reduce(lambda a,b:a+b, range(1,51))
print(sum)

#a function that calls itself recursive function

def factorial(x):
    """This is a recursive function
    to find the factorial of an integer"""

    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))


num = 3
print("The factorial of", num, "is", factorial(num))